Абстрактная фабрика - порождающий паттерн проектирования, который позволяет содавать семейства связанных объектов,
не привязываясь к конкретным классам создаваемых объектов.

Проблема: в том случае, если существует ряд зависимых продуктов с общим действием, каждый из которых может иметь
множество вариантов реализации, то нужно добиться сочетаемости продуктов внутри одного и того же семейства (т.е.
чтобы не было отличий по реализации конкретной вариации). Помимо этого нужно иметь возможность безболезненно расширять
функциональность при добавлении новых вариаций существующих продуктов или расширении ряда самих продуктов.

Структура:
1) Некоторое количество функциональных продуктов с общим действием (paint),
т.е. связанных между собой (каждому продукту соотвествует свой интерфейс - Button, CheckBox)
2) Некоторое количество вариаций (MacOS, Windows) каждого из связанных функциональных продуктов
3) Для каждого интерфейса создаётся набор конкретных реализаций под каждую из вариаций
(MacOSButton, WindowButton и MacOSCheckbox, WindowsCheckBox)
4) Для каждой вариации создаётся своя фабрика, создающая экземпляры конкретных вариаций связанных интерфейсов
(MacOSFactory и WindowsFactory)
5) Абстрактная фабрика, в которой есть возможность создавать любую вариацию всех связанных между собой продуктов
через Button createButton() и Checkbox createCheckBox(). При этом определять, какую конкретно вариацию реализации
создавать будет пользователь
6) Промежуточный класс, определяющий какой тип фабрики будет использоваться для выбора вариации функционального продукта

Применимость:
- когда бизнес-логика программы должна работать с разными видами связанныз друг с другом продуктов, не завися от
конкретных классов продуктов
-когда в программе уже используется фабричный метод, но рчережные изменения предполагают внедрение новых типов продуктов

Преимущества:
- гарантирует сочетаемость создаваемых продуктов
- избавляет клиентский код от привязки к конкретным классам продуктов
- выделяет код производства продуктов в одном место, упрощая поддержку кода
- упрощает добавление новых продуктов в программу
- реализует Open|Close Principle

Недостатки:
- усложняет код программы из-за введения множества дополнительных классов
- требует наличия всех типов продуктов каждой вариации